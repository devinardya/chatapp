{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/EC-Projects/EC-Backend-Lab/chatapp/src/Chat/Chat.js\";\nimport React, { useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nlet socket = io('localhost:3000');\n\nconst Chat = ({\n  location\n}) => {\n  const [input, updateInput] = useState(\"\");\n  const [text, updateText] = useState([]);\n  let name = location.state.user;\n  useEffect(() => {\n    socket.on('connection', function () {\n      console.log(\"CONNECTED\");\n    }); //console.log(\"USERNAME\", location.state.user)\n  }, []);\n  useEffect(() => {\n    socket.on('message', data => {\n      console.log(\"DATA HISTORY\", data);\n      updateText(data);\n    });\n  }, []);\n  useEffect(() => {\n    socket.on('new_message', function (data) {\n      console.log(\"new_message\", data); //cb(null, data);\n\n      let message = data;\n      let copyMessage = [...text];\n      updateText([...copyMessage, message]);\n    });\n  }, [text]);\n\n  const onChange = e => {\n    let value = e.target.value;\n    updateInput(value);\n  };\n\n  const onSubmit = e => {\n    e.preventDefault(); //socket.emit('new_message', input);\n\n    socket.emit(\"new_message\", {\n      username: name,\n      content: input\n    });\n    updateInput(\"\");\n    let message = {\n      username: name,\n      content: input\n    };\n    let copyMessage = [...text]; //copyMessage.splice(0, 1);\t\n\n    updateText([...copyMessage, message]);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 14\n    }\n  }, \"Chat\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 14\n    }\n  }, \"Hej, \", name), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 14\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    onChange: onChange,\n    value: input,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 18\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 18\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 14\n    }\n  }, text.map(data => {\n    let pointKey;\n\n    if (data.username === name) {\n      pointKey = \"messages-\" + Math.round(Math.random() * 99999999999);\n    } else {\n      pointKey = data.id;\n    } //console.log(data)\n\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: pointKey,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 29\n      }\n    }, data.username, \" : \", data.content));\n  })));\n};\n\nexport default Chat;","map":{"version":3,"sources":["/Users/admin/Documents/EC-Projects/EC-Backend-Lab/chatapp/src/Chat/Chat.js"],"names":["React","useEffect","useState","io","socket","Chat","location","input","updateInput","text","updateText","name","state","user","on","console","log","data","message","copyMessage","onChange","e","value","target","onSubmit","preventDefault","emit","username","content","map","pointKey","Math","round","random","id"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport io from 'socket.io-client';\n\nlet socket = io('localhost:3000');\n\nconst Chat = ({location}) => {\n\n    const [input, updateInput] = useState(\"\");\n    const [text, updateText] = useState([]);\n    let name = location.state.user;\n\n    useEffect( () => {\n        socket.on('connection', function(){\n            console.log(\"CONNECTED\")\n        }) \n        //console.log(\"USERNAME\", location.state.user)\n    }, [])\n\n    useEffect( () => {\n        socket.on('message', (data) => {\n            console.log(\"DATA HISTORY\",data)\n            updateText(data);\n        }); \n    }, [])\n\n    useEffect( () => {\n        socket.on('new_message', function(data){\n            console.log(\"new_message\", data);\n            //cb(null, data);\n            let message = data;\n            let copyMessage = [...text];\t\t\n            updateText([...copyMessage, message]);\n          });\n    }, [text])\n\n    const onChange = (e) => {\n        let value = e.target.value;\n        updateInput(value);\n    }\n\n    const onSubmit = (e) => {\n        e.preventDefault();\n\n        //socket.emit('new_message', input);\n        socket.emit(\"new_message\",{\n            username: name,\n            content: input,\n        })\n        updateInput(\"\");\n        let message = {username: name, content: input};\n        let copyMessage = [...text];\t\n        //copyMessage.splice(0, 1);\t\n        updateText([...copyMessage, message]);\n        \n    }\n\n    return <>\n             <h1>Chat</h1>\n             <p>Hej, {name}</p>\n             <form onSubmit = {onSubmit}>\n                 <input onChange={onChange} value={input}></input>\n                 <button></button>\n             </form>\n             <div>\n            {text.map(data => {\n                let pointKey;\n                if (data.username === name){\n                      pointKey = \"messages-\"+ Math.round(Math.random() * 99999999999);\n                }else {\n                      pointKey = data.id;\n                }\n                 //console.log(data)\n                 return <div key={pointKey}>\n                            <p>{data.username} : {data.content}</p>\n                        </div>\n             })\n             } \n             </div>\n           </>\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}