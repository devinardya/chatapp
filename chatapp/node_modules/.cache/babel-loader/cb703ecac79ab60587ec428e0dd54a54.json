{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/EC-Projects/EC-Backend-Lab/chatapp/src/Chat/Chat.js\";\nimport React, { useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport { DataMessagesHistory, DataMessagesUpdate } from '../socket';\nlet socket = io('localhost:3000');\n\nconst Chat = ({\n  location\n}) => {\n  const [input, updateInput] = useState(\"\");\n  const [messages, updateMessages] = useState([]);\n  let name = location.state.user;\n  useEffect(() => {\n    DataMessagesHistory().then(chatHistory => {\n      console.log(chatHistory);\n      updateMessages(chatHistory);\n    });\n    DataMessagesUpdate(socket, (err, newMessage) => {\n      let copyMessage = [...messages];\n      copyMessage.splice(0, 1); //console.log(newMessage)\n\n      updateMessages([...copyMessage, message]);\n    });\n  }, []);\n  /*   useEffect( () => {\n        socket.on('new_message', function(data){\n            console.log(\"new_message\", data);\n            //cb(null, data);\n            let message = data;\n            let copyMessage = [...messages];\t\t\n            updateMessages([...copyMessage, message]);\n          });\n    }, [messages]) */\n\n  const onChange = e => {\n    let value = e.target.value;\n    updateInput(value);\n  };\n\n  const onSubmit = e => {\n    e.preventDefault(); //socket.emit('new_message', input);\n\n    socket.emit(\"new_message\", {\n      username: name,\n      content: input\n    });\n    updateInput(\"\");\n    let message = {\n      username: name,\n      content: input\n    };\n    let copyMessage = [...messages]; //copyMessage.splice(0, 1);\t\n\n    updateMessages([...copyMessage, message]);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 14\n    }\n  }, \"Chat\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 14\n    }\n  }, \"Hej, \", name), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 14\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    onChange: onChange,\n    value: input,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 18\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 18\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 14\n    }\n  }, messages.map(data => {\n    let pointKey;\n\n    if (data.username === name) {\n      pointKey = \"messages-\" + Math.round(Math.random() * 99999999999);\n    } else {\n      pointKey = data.id;\n    } //console.log(data)\n\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: pointKey,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 29\n      }\n    }, data.username, \" : \", data.content));\n  })));\n};\n\nexport default Chat;","map":{"version":3,"sources":["/Users/admin/Documents/EC-Projects/EC-Backend-Lab/chatapp/src/Chat/Chat.js"],"names":["React","useEffect","useState","io","DataMessagesHistory","DataMessagesUpdate","socket","Chat","location","input","updateInput","messages","updateMessages","name","state","user","then","chatHistory","console","log","err","newMessage","copyMessage","splice","message","onChange","e","value","target","onSubmit","preventDefault","emit","username","content","map","data","pointKey","Math","round","random","id"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport io from 'socket.io-client';\nimport { DataMessagesHistory, DataMessagesUpdate } from '../socket';\n\nlet socket = io('localhost:3000');\n\nconst Chat = ({location}) => {\n\n    const [input, updateInput] = useState(\"\");\n    const [messages, updateMessages] = useState([]);\n    let name = location.state.user;\n   \n    useEffect(() => {\n        DataMessagesHistory()\n        .then( chatHistory => {\n            console.log(chatHistory)\n            updateMessages(chatHistory);\n        })\n\n        DataMessagesUpdate(socket, (err, newMessage) => {\t\n            let copyMessage = [...messages];\t\n            copyMessage.splice(0, 1);\t\n            //console.log(newMessage)\n            updateMessages([...copyMessage, message]);\n        })\n\n    }, []);\n\n\n  /*   useEffect( () => {\n        socket.on('new_message', function(data){\n            console.log(\"new_message\", data);\n            //cb(null, data);\n            let message = data;\n            let copyMessage = [...messages];\t\t\n            updateMessages([...copyMessage, message]);\n          });\n    }, [messages]) */\n\n\n    const onChange = (e) => {\n        let value = e.target.value;\n        updateInput(value);\n    }\n\n    const onSubmit = (e) => {\n        e.preventDefault();\n\n        //socket.emit('new_message', input);\n        socket.emit(\"new_message\",{\n            username: name,\n            content: input,\n        })\n        updateInput(\"\");\n        let message = {username: name, content: input};\n        let copyMessage = [...messages];\t\n        //copyMessage.splice(0, 1);\t\n        updateMessages([...copyMessage, message]);\n        \n    }\n\n    return <>\n             <h1>Chat</h1>\n             <p>Hej, {name}</p>\n             <form onSubmit = {onSubmit}>\n                 <input onChange={onChange} value={input}></input>\n                 <button></button>\n             </form>\n             <div>\n            {messages.map(data => {\n                let pointKey;\n                if (data.username === name){\n                      pointKey = \"messages-\"+ Math.round(Math.random() * 99999999999);\n                }else {\n                      pointKey = data.id;\n                }\n                 //console.log(data)\n                 return <div key={pointKey}>\n                            <p>{data.username} : {data.content}</p>\n                        </div>\n             })\n             } \n             </div>\n           </>\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}