{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/EC-Projects/EC-Backend-Lab/chatapp/src/Chat/Chat.js\";\nimport React, { useEffect, useState, useCallback } from 'react';\nimport io from 'socket.io-client';\nlet socket = io('localhost:3000');\n\nconst Chat = () => {\n  const [input, updateInput] = useState(\"\");\n  const [text, updateText] = useState([]);\n\n  const addMessage = data => {\n    let copyText = [...text];\n    updateText([...copyText, data]);\n  };\n\n  useEffect(() => {\n    socket.on('message', data => {\n      addMessage(data);\n      console.log(data);\n    });\n  }, []);\n\n  const onChange = e => {\n    let value = e.target.value;\n    updateInput(value);\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n    socket.emit('new_message', input);\n    let message = input;\n    let copyMessage = [...text];\n    copyMessage.splice(0, 1);\n    updateText([...copyMessage, message]);\n    updateInput(\"\");\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 14\n    }\n  }, \"Chat\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 14\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 18\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 18\n    }\n  })));\n};\n\nexport default Chat;","map":{"version":3,"sources":["/Users/admin/Documents/EC-Projects/EC-Backend-Lab/chatapp/src/Chat/Chat.js"],"names":["React","useEffect","useState","useCallback","io","socket","Chat","input","updateInput","text","updateText","addMessage","data","copyText","on","console","log","onChange","e","value","target","onSubmit","preventDefault","emit","message","copyMessage","splice"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,EAAoCC,WAApC,QAAsD,OAAtD;AACA,OAAOC,EAAP,MAAe,kBAAf;AAEA,IAAIC,MAAM,GAAGD,EAAE,CAAC,gBAAD,CAAf;;AAEA,MAAME,IAAI,GAAG,MAAM;AAEf,QAAM,CAACC,KAAD,EAAQC,WAAR,IAAuBN,QAAQ,CAAC,EAAD,CAArC;AACA,QAAM,CAACO,IAAD,EAAOC,UAAP,IAAqBR,QAAQ,CAAC,EAAD,CAAnC;;AAGA,QAAMS,UAAU,GAAIC,IAAD,IAAU;AACzB,QAAIC,QAAQ,GAAG,CAAC,GAAGJ,IAAJ,CAAf;AACAC,IAAAA,UAAU,CAAC,CAAC,GAAGG,QAAJ,EAAcD,IAAd,CAAD,CAAV;AAEH,GAJD;;AAMAX,EAAAA,SAAS,CAAE,MAAM;AAEbI,IAAAA,MAAM,CAACS,EAAP,CAAU,SAAV,EAAsBF,IAAD,IAAU;AAC3BD,MAAAA,UAAU,CAACC,IAAD,CAAV;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACH,KAHD;AAIH,GANQ,EAMN,EANM,CAAT;;AAQA,QAAMK,QAAQ,GAAIC,CAAD,IAAO;AACpB,QAAIC,KAAK,GAAGD,CAAC,CAACE,MAAF,CAASD,KAArB;AACAX,IAAAA,WAAW,CAACW,KAAD,CAAX;AACH,GAHD;;AAKA,QAAME,QAAQ,GAAIH,CAAD,IAAO;AACpBA,IAAAA,CAAC,CAACI,cAAF;AAEAjB,IAAAA,MAAM,CAACkB,IAAP,CAAY,aAAZ,EAA2BhB,KAA3B;AAEA,QAAIiB,OAAO,GAAGjB,KAAd;AACA,QAAIkB,WAAW,GAAG,CAAC,GAAGhB,IAAJ,CAAlB;AACAgB,IAAAA,WAAW,CAACC,MAAZ,CAAmB,CAAnB,EAAsB,CAAtB;AACAhB,IAAAA,UAAU,CAAC,CAAC,GAAGe,WAAJ,EAAiBD,OAAjB,CAAD,CAAV;AACAhB,IAAAA,WAAW,CAAC,EAAD,CAAX;AACH,GAVD;;AAYA,sBAAO,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAM,IAAA,QAAQ,EAAIa,QAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAO,IAAA,QAAQ,EAAEJ,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CAFF,CAAP;AAYH,CAjDD;;AAmDA,eAAeX,IAAf","sourcesContent":["import React, {useEffect, useState, useCallback} from 'react';\nimport io from 'socket.io-client';\n\nlet socket = io('localhost:3000');\n\nconst Chat = () => {\n\n    const [input, updateInput] = useState(\"\");\n    const [text, updateText] = useState([]);\n\n\n    const addMessage = (data) => {\n        let copyText = [...text];\n        updateText([...copyText, data]);\n        \n    };\n\n    useEffect( () => {\n\n        socket.on('message', (data) => {\n            addMessage(data);\n            console.log(data)\n        })\n    }, [])\n\n    const onChange = (e) => {\n        let value = e.target.value;\n        updateInput(value);\n    }\n\n    const onSubmit = (e) => {\n        e.preventDefault();\n\n        socket.emit('new_message', input);\n      \n        let message = input;\n        let copyMessage = [...text];\t\n        copyMessage.splice(0, 1);\t\n        updateText([...copyMessage, message]);\n        updateInput(\"\");\n    }\n\n    return <>\n             <h1>Chat</h1>\n             <form onSubmit = {onSubmit}>\n                 <input onChange={onChange}></input>\n                 <button></button>\n             </form>\n            {/*  {text.map(data => {\n                 console.log(data)\n                 return <p key={data}>{data}</p>\n             })\n             }  */}\n           </>\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}